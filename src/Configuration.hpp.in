/*******************************************************************************
 * This file is part of CosTuuM
 * Copyright (C) 2016, 2019 Bert Vandenbroucke (bert.vandenbroucke@gmail.com)
 *
 * CosTuuM is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * CosTuuM is distributed in the hope that it will be useful, but WITOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with CosTuuM. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

/**
 * @file Configuration.hpp
 *
 * @brief File containing CMake configured configuration flags.
 *
 * Do not edit this file directly! Instead edit Configuration.hpp.in.
 *
 * This file was originally part of the photoionization code CMacIonize
 * (https://github.com/bwvdnbro/CMacIonize).
 *
 * @author Bert Vandenbroucke (bv7@st-andrews.ac.uk)
 * @author Bert Vandenbroucke (bert.vandenbroucke@ugent.be)
 */
#ifndef CONFIGURATION_HPP
#define CONFIGURATION_HPP

#include <cinttypes>

/*! @brief If defined, activates inline assertions (which slows down the code
 *  considerably).*/
#cmakedefine HAVE_ASSERTIONS

/*! @brief If defined, the compiler supports OpenMP. */
#cmakedefine HAVE_OPENMP

/*! @brief If defined, this system is a POSIX system. */
#cmakedefine HAVE_POSIX

/*! @brief If defined, this is a Windows system. */
#cmakedefine HAVE_WINDOWS

/*! @brief If defined, the system has Boost multiprecision available. */
#cmakedefine HAVE_MULTIPRECISION

/*! @brief If defined, the code uses quad instead of double precision. */
#cmakedefine HAVE_QUAD_PRECISION

#if defined(HAVE_MULTIPRECISION) && defined(HAVE_QUAD_PRECISION)
#include <boost/multiprecision/cpp_bin_float.hpp>
#include <boost/multiprecision/float128.hpp>
#include <boost/multiprecision/complex128.hpp>
/*! @brief Data type for floating point variables. */
typedef boost::multiprecision::cpp_bin_float_quad float_type;
typedef boost::multiprecision::float128 fortran_float_type;
typedef boost::multiprecision::complex128 fortran_complex_type;
#else
/*! @brief Data type for floating point variables. */
typedef double float_type;
typedef double fortran_float_type;
typedef std::complex fortran_complex_type
#endif

/*! @brief Maximum number of shared memory threads that can be used on this
 *  system. */
// clang-format off
const int_fast32_t MAX_NUM_THREADS = @MAX_NUM_THREADS@;
// clang-format on

#endif // CONFIGURATION_HPP
